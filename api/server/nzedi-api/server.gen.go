// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Account defines model for Account.
type Account struct {
	Date     time.Time `json:"date"`
	Email    string    `json:"email"`
	Id       int       `json:"id"`
	Password string    `json:"password"`
	Token    *string   `json:"token,omitempty"`
	UserName *string   `json:"userName,omitempty"`
}

// AccountState defines model for AccountState.
type AccountState struct {
	Description *string `json:"description,omitempty"`
	Id          int     `json:"id"`
	Name        string  `json:"name"`
}

// AccountType defines model for AccountType.
type AccountType struct {
	AccountId    int `json:"accountId"`
	AccountState int `json:"accountState"`
	Id           int `json:"id"`
	UserTypeId   int `json:"userTypeId"`
}

// Company defines model for Company.
type Company struct {
	Id      int     `json:"id"`
	Manager int     `json:"manager"`
	Name    string  `json:"name"`
	Url     *string `json:"url,omitempty"`
}

// User defines model for User.
type User struct {
	AccountId   int        `json:"accountId"`
	DateOfBirth *time.Time `json:"dateOfBirth,omitempty"`
	FirstName   string     `json:"firstName"`

	// Unique identifier for the given user.
	Id       int    `json:"id"`
	LastName string `json:"lastName"`
}

// UserType defines model for UserType.
type UserType struct {
	Description *string `json:"description,omitempty"`
	Id          int     `json:"id"`
	Name        string  `json:"name"`
}

// DeleteAccountJSONBody defines parameters for DeleteAccount.
type DeleteAccountJSONBody Account

// PatchAccountJSONBody defines parameters for PatchAccount.
type PatchAccountJSONBody Account

// PostAccountJSONBody defines parameters for PostAccount.
type PostAccountJSONBody Account

// PutAccountJSONBody defines parameters for PutAccount.
type PutAccountJSONBody Account

// DeleteAccountStateJSONBody defines parameters for DeleteAccountState.
type DeleteAccountStateJSONBody AccountState

// PatchAccountStateJSONBody defines parameters for PatchAccountState.
type PatchAccountStateJSONBody AccountState

// PostAccountStateJSONBody defines parameters for PostAccountState.
type PostAccountStateJSONBody AccountState

// DeleteAccountTypeJSONBody defines parameters for DeleteAccountType.
type DeleteAccountTypeJSONBody AccountType

// PatchAccountTypeJSONBody defines parameters for PatchAccountType.
type PatchAccountTypeJSONBody AccountType

// PostAccountTypeJSONBody defines parameters for PostAccountType.
type PostAccountTypeJSONBody AccountType

// DeleteCompanyJSONBody defines parameters for DeleteCompany.
type DeleteCompanyJSONBody Company

// PatchCompanyJSONBody defines parameters for PatchCompany.
type PatchCompanyJSONBody Company

// PostCompanyJSONBody defines parameters for PostCompany.
type PostCompanyJSONBody Company

// DeleteUserJSONBody defines parameters for DeleteUser.
type DeleteUserJSONBody User

// PatchUserJSONBody defines parameters for PatchUser.
type PatchUserJSONBody User

// PostUserJSONBody defines parameters for PostUser.
type PostUserJSONBody struct {
	DateOfBirth openapi_types.Date `json:"dateOfBirth"`
	Email       string             `json:"email"`
	FirstName   string             `json:"firstName"`
	LastName    string             `json:"lastName"`
}

// DeleteUserTypeJSONBody defines parameters for DeleteUserType.
type DeleteUserTypeJSONBody UserType

// PatchUserTypeJSONBody defines parameters for PatchUserType.
type PatchUserTypeJSONBody UserType

// PostUserTypeJSONBody defines parameters for PostUserType.
type PostUserTypeJSONBody UserType

// DeleteAccountJSONRequestBody defines body for DeleteAccount for application/json ContentType.
type DeleteAccountJSONRequestBody DeleteAccountJSONBody

// PatchAccountJSONRequestBody defines body for PatchAccount for application/json ContentType.
type PatchAccountJSONRequestBody PatchAccountJSONBody

// PostAccountJSONRequestBody defines body for PostAccount for application/json ContentType.
type PostAccountJSONRequestBody PostAccountJSONBody

// PutAccountJSONRequestBody defines body for PutAccount for application/json ContentType.
type PutAccountJSONRequestBody PutAccountJSONBody

// DeleteAccountStateJSONRequestBody defines body for DeleteAccountState for application/json ContentType.
type DeleteAccountStateJSONRequestBody DeleteAccountStateJSONBody

// PatchAccountStateJSONRequestBody defines body for PatchAccountState for application/json ContentType.
type PatchAccountStateJSONRequestBody PatchAccountStateJSONBody

// PostAccountStateJSONRequestBody defines body for PostAccountState for application/json ContentType.
type PostAccountStateJSONRequestBody PostAccountStateJSONBody

// DeleteAccountTypeJSONRequestBody defines body for DeleteAccountType for application/json ContentType.
type DeleteAccountTypeJSONRequestBody DeleteAccountTypeJSONBody

// PatchAccountTypeJSONRequestBody defines body for PatchAccountType for application/json ContentType.
type PatchAccountTypeJSONRequestBody PatchAccountTypeJSONBody

// PostAccountTypeJSONRequestBody defines body for PostAccountType for application/json ContentType.
type PostAccountTypeJSONRequestBody PostAccountTypeJSONBody

// DeleteCompanyJSONRequestBody defines body for DeleteCompany for application/json ContentType.
type DeleteCompanyJSONRequestBody DeleteCompanyJSONBody

// PatchCompanyJSONRequestBody defines body for PatchCompany for application/json ContentType.
type PatchCompanyJSONRequestBody PatchCompanyJSONBody

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody PostCompanyJSONBody

// DeleteUserJSONRequestBody defines body for DeleteUser for application/json ContentType.
type DeleteUserJSONRequestBody DeleteUserJSONBody

// PatchUserJSONRequestBody defines body for PatchUser for application/json ContentType.
type PatchUserJSONRequestBody PatchUserJSONBody

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody PostUserJSONBody

// DeleteUserTypeJSONRequestBody defines body for DeleteUserType for application/json ContentType.
type DeleteUserTypeJSONRequestBody DeleteUserTypeJSONBody

// PatchUserTypeJSONRequestBody defines body for PatchUserType for application/json ContentType.
type PatchUserTypeJSONRequestBody PatchUserTypeJSONBody

// PostUserTypeJSONRequestBody defines body for PostUserType for application/json ContentType.
type PostUserTypeJSONRequestBody PostUserTypeJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteAccount request with any body
	DeleteAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAccount(ctx context.Context, body DeleteAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccount request
	GetAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAccount request with any body
	PatchAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAccount(ctx context.Context, body PatchAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccount request with any body
	PostAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccount(ctx context.Context, body PostAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAccount request with any body
	PutAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAccount(ctx context.Context, body PutAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccountState request with any body
	DeleteAccountStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAccountState(ctx context.Context, body DeleteAccountStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountState request
	GetAccountState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAccountState request with any body
	PatchAccountStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAccountState(ctx context.Context, body PatchAccountStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountState request with any body
	PostAccountStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountState(ctx context.Context, body PostAccountStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountStateId request
	GetAccountStateId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccountType request with any body
	DeleteAccountTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAccountType(ctx context.Context, body DeleteAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountType request
	GetAccountType(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAccountType request with any body
	PatchAccountTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAccountType(ctx context.Context, body PatchAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountType request with any body
	PostAccountTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountType(ctx context.Context, body PostAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountTypeAccountId request
	GetAccountTypeAccountId(ctx context.Context, accountId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountTypeId request
	GetAccountTypeId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountAccountId request
	GetAccountAccountId(ctx context.Context, accountId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCompany request with any body
	DeleteCompanyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCompany(ctx context.Context, body DeleteCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompany request
	GetCompany(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchCompany request with any body
	PatchCompanyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchCompany(ctx context.Context, body PatchCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCompany request with any body
	PostCompanyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCompany(ctx context.Context, body PostCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyUserId request
	GetCompanyUserId(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyId request
	GetCompanyId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request with any body
	DeleteUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUser(ctx context.Context, body DeleteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUser request with any body
	PatchUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUser(ctx context.Context, body PatchUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUser request with any body
	PostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUser(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserType request with any body
	DeleteUserTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUserType(ctx context.Context, body DeleteUserTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserType request
	GetUserType(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUserType request with any body
	PatchUserTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUserType(ctx context.Context, body PatchUserTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserType request with any body
	PostUserTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserType(ctx context.Context, body PostUserTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserTypeId request
	GetUserTypeId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserAccountId request
	GetUserAccountId(ctx context.Context, accountId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersUserId request
	GetUsersUserId(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccount(ctx context.Context, body DeleteAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAccount(ctx context.Context, body PatchAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccount(ctx context.Context, body PostAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccount(ctx context.Context, body PutAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccountStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountStateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccountState(ctx context.Context, body DeleteAccountStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountStateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountState(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAccountStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAccountStateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAccountState(ctx context.Context, body PatchAccountStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAccountStateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountStateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountState(ctx context.Context, body PostAccountStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountStateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountStateId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountStateIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccountTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccountType(ctx context.Context, body DeleteAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountType(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountTypeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAccountTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAccountTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAccountType(ctx context.Context, body PatchAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAccountTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountType(ctx context.Context, body PostAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountTypeAccountId(ctx context.Context, accountId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountTypeAccountIdRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountTypeId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountTypeIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountAccountId(ctx context.Context, accountId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountAccountIdRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCompanyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCompanyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCompany(ctx context.Context, body DeleteCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCompanyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompany(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCompanyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCompanyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCompany(ctx context.Context, body PatchCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCompanyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCompanyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCompanyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCompany(ctx context.Context, body PostCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCompanyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyUserId(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, body DeleteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUser(ctx context.Context, body PatchUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUser(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserType(ctx context.Context, body DeleteUserTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserType(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserTypeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserType(ctx context.Context, body PatchUserTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserType(ctx context.Context, body PostUserTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserTypeId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserTypeIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAccountId(ctx context.Context, accountId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserAccountIdRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersUserId(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteAccountRequest calls the generic DeleteAccount builder with application/json body
func NewDeleteAccountRequest(server string, body DeleteAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteAccountRequestWithBody generates requests for DeleteAccount with any type of body
func NewDeleteAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountRequest generates requests for GetAccount
func NewGetAccountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAccountRequest calls the generic PatchAccount builder with application/json body
func NewPatchAccountRequest(server string, body PatchAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchAccountRequestWithBody generates requests for PatchAccount with any type of body
func NewPatchAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountRequest calls the generic PostAccount builder with application/json body
func NewPostAccountRequest(server string, body PostAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountRequestWithBody generates requests for PostAccount with any type of body
func NewPostAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAccountRequest calls the generic PutAccount builder with application/json body
func NewPutAccountRequest(server string, body PutAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewPutAccountRequestWithBody generates requests for PutAccount with any type of body
func NewPutAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAccountStateRequest calls the generic DeleteAccountState builder with application/json body
func NewDeleteAccountStateRequest(server string, body DeleteAccountStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAccountStateRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteAccountStateRequestWithBody generates requests for DeleteAccountState with any type of body
func NewDeleteAccountStateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account-state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountStateRequest generates requests for GetAccountState
func NewGetAccountStateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account-state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAccountStateRequest calls the generic PatchAccountState builder with application/json body
func NewPatchAccountStateRequest(server string, body PatchAccountStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAccountStateRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchAccountStateRequestWithBody generates requests for PatchAccountState with any type of body
func NewPatchAccountStateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account-state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountStateRequest calls the generic PostAccountState builder with application/json body
func NewPostAccountStateRequest(server string, body PostAccountStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountStateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountStateRequestWithBody generates requests for PostAccountState with any type of body
func NewPostAccountStateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account-state")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountStateIdRequest generates requests for GetAccountStateId
func NewGetAccountStateIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account-state/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAccountTypeRequest calls the generic DeleteAccountType builder with application/json body
func NewDeleteAccountTypeRequest(server string, body DeleteAccountTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAccountTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteAccountTypeRequestWithBody generates requests for DeleteAccountType with any type of body
func NewDeleteAccountTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account-type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountTypeRequest generates requests for GetAccountType
func NewGetAccountTypeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account-type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAccountTypeRequest calls the generic PatchAccountType builder with application/json body
func NewPatchAccountTypeRequest(server string, body PatchAccountTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAccountTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchAccountTypeRequestWithBody generates requests for PatchAccountType with any type of body
func NewPatchAccountTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account-type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAccountTypeRequest calls the generic PostAccountType builder with application/json body
func NewPostAccountTypeRequest(server string, body PostAccountTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAccountTypeRequestWithBody generates requests for PostAccountType with any type of body
func NewPostAccountTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account-type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountTypeAccountIdRequest generates requests for GetAccountTypeAccountId
func NewGetAccountTypeAccountIdRequest(server string, accountId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account-type/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountTypeIdRequest generates requests for GetAccountTypeId
func NewGetAccountTypeIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account-type/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountAccountIdRequest generates requests for GetAccountAccountId
func NewGetAccountAccountIdRequest(server string, accountId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCompanyRequest calls the generic DeleteCompany builder with application/json body
func NewDeleteCompanyRequest(server string, body DeleteCompanyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCompanyRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteCompanyRequestWithBody generates requests for DeleteCompany with any type of body
func NewDeleteCompanyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/company")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCompanyRequest generates requests for GetCompany
func NewGetCompanyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/company")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchCompanyRequest calls the generic PatchCompany builder with application/json body
func NewPatchCompanyRequest(server string, body PatchCompanyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchCompanyRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchCompanyRequestWithBody generates requests for PatchCompany with any type of body
func NewPatchCompanyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/company")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCompanyRequest calls the generic PostCompany builder with application/json body
func NewPostCompanyRequest(server string, body PostCompanyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCompanyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCompanyRequestWithBody generates requests for PostCompany with any type of body
func NewPostCompanyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/company")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCompanyUserIdRequest generates requests for GetCompanyUserId
func NewGetCompanyUserIdRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/company/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyIdRequest generates requests for GetCompanyId
func NewGetCompanyIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/company/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserRequest calls the generic DeleteUser builder with application/json body
func NewDeleteUserRequest(server string, body DeleteUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUserRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteUserRequestWithBody generates requests for DeleteUser with any type of body
func NewDeleteUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUserRequest calls the generic PatchUser builder with application/json body
func NewPatchUserRequest(server string, body PatchUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchUserRequestWithBody generates requests for PatchUser with any type of body
func NewPatchUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserRequest calls the generic PostUser builder with application/json body
func NewPostUserRequest(server string, body PostUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserRequestWithBody generates requests for PostUser with any type of body
func NewPostUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserTypeRequest calls the generic DeleteUserType builder with application/json body
func NewDeleteUserTypeRequest(server string, body DeleteUserTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUserTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteUserTypeRequestWithBody generates requests for DeleteUserType with any type of body
func NewDeleteUserTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserTypeRequest generates requests for GetUserType
func NewGetUserTypeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUserTypeRequest calls the generic PatchUserType builder with application/json body
func NewPatchUserTypeRequest(server string, body PatchUserTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUserTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchUserTypeRequestWithBody generates requests for PatchUserType with any type of body
func NewPatchUserTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserTypeRequest calls the generic PostUserType builder with application/json body
func NewPostUserTypeRequest(server string, body PostUserTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserTypeRequestWithBody generates requests for PostUserType with any type of body
func NewPostUserTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserTypeIdRequest generates requests for GetUserTypeId
func NewGetUserTypeIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-type/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserAccountIdRequest generates requests for GetUserAccountId
func NewGetUserAccountIdRequest(server string, accountId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersUserIdRequest generates requests for GetUsersUserId
func NewGetUsersUserIdRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteAccount request with any body
	DeleteAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error)

	DeleteAccountWithResponse(ctx context.Context, body DeleteAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error)

	// GetAccount request
	GetAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountResponse, error)

	// PatchAccount request with any body
	PatchAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAccountResponse, error)

	PatchAccountWithResponse(ctx context.Context, body PatchAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAccountResponse, error)

	// PostAccount request with any body
	PostAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountResponse, error)

	PostAccountWithResponse(ctx context.Context, body PostAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountResponse, error)

	// PutAccount request with any body
	PutAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccountResponse, error)

	PutAccountWithResponse(ctx context.Context, body PutAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccountResponse, error)

	// DeleteAccountState request with any body
	DeleteAccountStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAccountStateResponse, error)

	DeleteAccountStateWithResponse(ctx context.Context, body DeleteAccountStateJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAccountStateResponse, error)

	// GetAccountState request
	GetAccountStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountStateResponse, error)

	// PatchAccountState request with any body
	PatchAccountStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAccountStateResponse, error)

	PatchAccountStateWithResponse(ctx context.Context, body PatchAccountStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAccountStateResponse, error)

	// PostAccountState request with any body
	PostAccountStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountStateResponse, error)

	PostAccountStateWithResponse(ctx context.Context, body PostAccountStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountStateResponse, error)

	// GetAccountStateId request
	GetAccountStateIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetAccountStateIdResponse, error)

	// DeleteAccountType request with any body
	DeleteAccountTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAccountTypeResponse, error)

	DeleteAccountTypeWithResponse(ctx context.Context, body DeleteAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAccountTypeResponse, error)

	// GetAccountType request
	GetAccountTypeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountTypeResponse, error)

	// PatchAccountType request with any body
	PatchAccountTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAccountTypeResponse, error)

	PatchAccountTypeWithResponse(ctx context.Context, body PatchAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAccountTypeResponse, error)

	// PostAccountType request with any body
	PostAccountTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountTypeResponse, error)

	PostAccountTypeWithResponse(ctx context.Context, body PostAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountTypeResponse, error)

	// GetAccountTypeAccountId request
	GetAccountTypeAccountIdWithResponse(ctx context.Context, accountId int, reqEditors ...RequestEditorFn) (*GetAccountTypeAccountIdResponse, error)

	// GetAccountTypeId request
	GetAccountTypeIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetAccountTypeIdResponse, error)

	// GetAccountAccountId request
	GetAccountAccountIdWithResponse(ctx context.Context, accountId int, reqEditors ...RequestEditorFn) (*GetAccountAccountIdResponse, error)

	// DeleteCompany request with any body
	DeleteCompanyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCompanyResponse, error)

	DeleteCompanyWithResponse(ctx context.Context, body DeleteCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCompanyResponse, error)

	// GetCompany request
	GetCompanyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCompanyResponse, error)

	// PatchCompany request with any body
	PatchCompanyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCompanyResponse, error)

	PatchCompanyWithResponse(ctx context.Context, body PatchCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCompanyResponse, error)

	// PostCompany request with any body
	PostCompanyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCompanyResponse, error)

	PostCompanyWithResponse(ctx context.Context, body PostCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCompanyResponse, error)

	// GetCompanyUserId request
	GetCompanyUserIdWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetCompanyUserIdResponse, error)

	// GetCompanyId request
	GetCompanyIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetCompanyIdResponse, error)

	// DeleteUser request with any body
	DeleteUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	DeleteUserWithResponse(ctx context.Context, body DeleteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// PatchUser request with any body
	PatchUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserResponse, error)

	PatchUserWithResponse(ctx context.Context, body PatchUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserResponse, error)

	// PostUser request with any body
	PostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserResponse, error)

	PostUserWithResponse(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserResponse, error)

	// DeleteUserType request with any body
	DeleteUserTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserTypeResponse, error)

	DeleteUserTypeWithResponse(ctx context.Context, body DeleteUserTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserTypeResponse, error)

	// GetUserType request
	GetUserTypeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserTypeResponse, error)

	// PatchUserType request with any body
	PatchUserTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserTypeResponse, error)

	PatchUserTypeWithResponse(ctx context.Context, body PatchUserTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserTypeResponse, error)

	// PostUserType request with any body
	PostUserTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserTypeResponse, error)

	PostUserTypeWithResponse(ctx context.Context, body PostUserTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserTypeResponse, error)

	// GetUserTypeId request
	GetUserTypeIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetUserTypeIdResponse, error)

	// GetUserAccountId request
	GetUserAccountIdWithResponse(ctx context.Context, accountId int, reqEditors ...RequestEditorFn) (*GetUserAccountIdResponse, error)

	// GetUsersUserId request
	GetUsersUserIdWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUsersUserIdResponse, error)
}

type DeleteAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
}

// Status returns HTTPResponse.Status
func (r DeleteAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Account
}

// Status returns HTTPResponse.Status
func (r GetAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r PatchAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Account
}

// Status returns HTTPResponse.Status
func (r PostAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r PutAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccountStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
}

// Status returns HTTPResponse.Status
func (r DeleteAccountStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountState
}

// Status returns HTTPResponse.Status
func (r GetAccountStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAccountStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountState
}

// Status returns HTTPResponse.Status
func (r PatchAccountStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAccountStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AccountState
}

// Status returns HTTPResponse.Status
func (r PostAccountStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountStateIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *AccountState
}

// Status returns HTTPResponse.Status
func (r GetAccountStateIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountStateIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccountTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountType
}

// Status returns HTTPResponse.Status
func (r DeleteAccountTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AccountType
}

// Status returns HTTPResponse.Status
func (r GetAccountTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAccountTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountType
}

// Status returns HTTPResponse.Status
func (r PatchAccountTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAccountTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AccountType
}

// Status returns HTTPResponse.Status
func (r PostAccountTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountTypeAccountIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AccountType
}

// Status returns HTTPResponse.Status
func (r GetAccountTypeAccountIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountTypeAccountIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountTypeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountType
}

// Status returns HTTPResponse.Status
func (r GetAccountTypeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountTypeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountAccountIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r GetAccountAccountIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountAccountIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
}

// Status returns HTTPResponse.Status
func (r DeleteCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Company
}

// Status returns HTTPResponse.Status
func (r GetCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Company
}

// Status returns HTTPResponse.Status
func (r PatchCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Company
}

// Status returns HTTPResponse.Status
func (r PostCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Company
}

// Status returns HTTPResponse.Status
func (r GetCompanyUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Company
}

// Status returns HTTPResponse.Status
func (r GetCompanyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PatchUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PostUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
}

// Status returns HTTPResponse.Status
func (r DeleteUserTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserType
}

// Status returns HTTPResponse.Status
func (r GetUserTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUserTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserType
}

// Status returns HTTPResponse.Status
func (r PatchUserTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUserTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserType
}

// Status returns HTTPResponse.Status
func (r PostUserTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserTypeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserType
}

// Status returns HTTPResponse.Status
func (r GetUserTypeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserTypeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserAccountIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserAccountIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserAccountIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteAccountWithBodyWithResponse request with arbitrary body returning *DeleteAccountResponse
func (c *ClientWithResponses) DeleteAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error) {
	rsp, err := c.DeleteAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountResponse(rsp)
}

func (c *ClientWithResponses) DeleteAccountWithResponse(ctx context.Context, body DeleteAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error) {
	rsp, err := c.DeleteAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountResponse(rsp)
}

// GetAccountWithResponse request returning *GetAccountResponse
func (c *ClientWithResponses) GetAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountResponse, error) {
	rsp, err := c.GetAccount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountResponse(rsp)
}

// PatchAccountWithBodyWithResponse request with arbitrary body returning *PatchAccountResponse
func (c *ClientWithResponses) PatchAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAccountResponse, error) {
	rsp, err := c.PatchAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAccountResponse(rsp)
}

func (c *ClientWithResponses) PatchAccountWithResponse(ctx context.Context, body PatchAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAccountResponse, error) {
	rsp, err := c.PatchAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAccountResponse(rsp)
}

// PostAccountWithBodyWithResponse request with arbitrary body returning *PostAccountResponse
func (c *ClientWithResponses) PostAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountResponse, error) {
	rsp, err := c.PostAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountResponse(rsp)
}

func (c *ClientWithResponses) PostAccountWithResponse(ctx context.Context, body PostAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountResponse, error) {
	rsp, err := c.PostAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountResponse(rsp)
}

// PutAccountWithBodyWithResponse request with arbitrary body returning *PutAccountResponse
func (c *ClientWithResponses) PutAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccountResponse, error) {
	rsp, err := c.PutAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccountResponse(rsp)
}

func (c *ClientWithResponses) PutAccountWithResponse(ctx context.Context, body PutAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccountResponse, error) {
	rsp, err := c.PutAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccountResponse(rsp)
}

// DeleteAccountStateWithBodyWithResponse request with arbitrary body returning *DeleteAccountStateResponse
func (c *ClientWithResponses) DeleteAccountStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAccountStateResponse, error) {
	rsp, err := c.DeleteAccountStateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountStateResponse(rsp)
}

func (c *ClientWithResponses) DeleteAccountStateWithResponse(ctx context.Context, body DeleteAccountStateJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAccountStateResponse, error) {
	rsp, err := c.DeleteAccountState(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountStateResponse(rsp)
}

// GetAccountStateWithResponse request returning *GetAccountStateResponse
func (c *ClientWithResponses) GetAccountStateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountStateResponse, error) {
	rsp, err := c.GetAccountState(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountStateResponse(rsp)
}

// PatchAccountStateWithBodyWithResponse request with arbitrary body returning *PatchAccountStateResponse
func (c *ClientWithResponses) PatchAccountStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAccountStateResponse, error) {
	rsp, err := c.PatchAccountStateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAccountStateResponse(rsp)
}

func (c *ClientWithResponses) PatchAccountStateWithResponse(ctx context.Context, body PatchAccountStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAccountStateResponse, error) {
	rsp, err := c.PatchAccountState(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAccountStateResponse(rsp)
}

// PostAccountStateWithBodyWithResponse request with arbitrary body returning *PostAccountStateResponse
func (c *ClientWithResponses) PostAccountStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountStateResponse, error) {
	rsp, err := c.PostAccountStateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountStateResponse(rsp)
}

func (c *ClientWithResponses) PostAccountStateWithResponse(ctx context.Context, body PostAccountStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountStateResponse, error) {
	rsp, err := c.PostAccountState(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountStateResponse(rsp)
}

// GetAccountStateIdWithResponse request returning *GetAccountStateIdResponse
func (c *ClientWithResponses) GetAccountStateIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetAccountStateIdResponse, error) {
	rsp, err := c.GetAccountStateId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountStateIdResponse(rsp)
}

// DeleteAccountTypeWithBodyWithResponse request with arbitrary body returning *DeleteAccountTypeResponse
func (c *ClientWithResponses) DeleteAccountTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAccountTypeResponse, error) {
	rsp, err := c.DeleteAccountTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountTypeResponse(rsp)
}

func (c *ClientWithResponses) DeleteAccountTypeWithResponse(ctx context.Context, body DeleteAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAccountTypeResponse, error) {
	rsp, err := c.DeleteAccountType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountTypeResponse(rsp)
}

// GetAccountTypeWithResponse request returning *GetAccountTypeResponse
func (c *ClientWithResponses) GetAccountTypeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountTypeResponse, error) {
	rsp, err := c.GetAccountType(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountTypeResponse(rsp)
}

// PatchAccountTypeWithBodyWithResponse request with arbitrary body returning *PatchAccountTypeResponse
func (c *ClientWithResponses) PatchAccountTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAccountTypeResponse, error) {
	rsp, err := c.PatchAccountTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAccountTypeResponse(rsp)
}

func (c *ClientWithResponses) PatchAccountTypeWithResponse(ctx context.Context, body PatchAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAccountTypeResponse, error) {
	rsp, err := c.PatchAccountType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAccountTypeResponse(rsp)
}

// PostAccountTypeWithBodyWithResponse request with arbitrary body returning *PostAccountTypeResponse
func (c *ClientWithResponses) PostAccountTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountTypeResponse, error) {
	rsp, err := c.PostAccountTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountTypeResponse(rsp)
}

func (c *ClientWithResponses) PostAccountTypeWithResponse(ctx context.Context, body PostAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountTypeResponse, error) {
	rsp, err := c.PostAccountType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountTypeResponse(rsp)
}

// GetAccountTypeAccountIdWithResponse request returning *GetAccountTypeAccountIdResponse
func (c *ClientWithResponses) GetAccountTypeAccountIdWithResponse(ctx context.Context, accountId int, reqEditors ...RequestEditorFn) (*GetAccountTypeAccountIdResponse, error) {
	rsp, err := c.GetAccountTypeAccountId(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountTypeAccountIdResponse(rsp)
}

// GetAccountTypeIdWithResponse request returning *GetAccountTypeIdResponse
func (c *ClientWithResponses) GetAccountTypeIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetAccountTypeIdResponse, error) {
	rsp, err := c.GetAccountTypeId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountTypeIdResponse(rsp)
}

// GetAccountAccountIdWithResponse request returning *GetAccountAccountIdResponse
func (c *ClientWithResponses) GetAccountAccountIdWithResponse(ctx context.Context, accountId int, reqEditors ...RequestEditorFn) (*GetAccountAccountIdResponse, error) {
	rsp, err := c.GetAccountAccountId(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountAccountIdResponse(rsp)
}

// DeleteCompanyWithBodyWithResponse request with arbitrary body returning *DeleteCompanyResponse
func (c *ClientWithResponses) DeleteCompanyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCompanyResponse, error) {
	rsp, err := c.DeleteCompanyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCompanyResponse(rsp)
}

func (c *ClientWithResponses) DeleteCompanyWithResponse(ctx context.Context, body DeleteCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCompanyResponse, error) {
	rsp, err := c.DeleteCompany(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCompanyResponse(rsp)
}

// GetCompanyWithResponse request returning *GetCompanyResponse
func (c *ClientWithResponses) GetCompanyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCompanyResponse, error) {
	rsp, err := c.GetCompany(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyResponse(rsp)
}

// PatchCompanyWithBodyWithResponse request with arbitrary body returning *PatchCompanyResponse
func (c *ClientWithResponses) PatchCompanyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCompanyResponse, error) {
	rsp, err := c.PatchCompanyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCompanyResponse(rsp)
}

func (c *ClientWithResponses) PatchCompanyWithResponse(ctx context.Context, body PatchCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCompanyResponse, error) {
	rsp, err := c.PatchCompany(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCompanyResponse(rsp)
}

// PostCompanyWithBodyWithResponse request with arbitrary body returning *PostCompanyResponse
func (c *ClientWithResponses) PostCompanyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCompanyResponse, error) {
	rsp, err := c.PostCompanyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCompanyResponse(rsp)
}

func (c *ClientWithResponses) PostCompanyWithResponse(ctx context.Context, body PostCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCompanyResponse, error) {
	rsp, err := c.PostCompany(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCompanyResponse(rsp)
}

// GetCompanyUserIdWithResponse request returning *GetCompanyUserIdResponse
func (c *ClientWithResponses) GetCompanyUserIdWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetCompanyUserIdResponse, error) {
	rsp, err := c.GetCompanyUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyUserIdResponse(rsp)
}

// GetCompanyIdWithResponse request returning *GetCompanyIdResponse
func (c *ClientWithResponses) GetCompanyIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetCompanyIdResponse, error) {
	rsp, err := c.GetCompanyId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyIdResponse(rsp)
}

// DeleteUserWithBodyWithResponse request with arbitrary body returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, body DeleteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// PatchUserWithBodyWithResponse request with arbitrary body returning *PatchUserResponse
func (c *ClientWithResponses) PatchUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserResponse, error) {
	rsp, err := c.PatchUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserResponse(rsp)
}

func (c *ClientWithResponses) PatchUserWithResponse(ctx context.Context, body PatchUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserResponse, error) {
	rsp, err := c.PatchUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserResponse(rsp)
}

// PostUserWithBodyWithResponse request with arbitrary body returning *PostUserResponse
func (c *ClientWithResponses) PostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserResponse, error) {
	rsp, err := c.PostUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserResponse(rsp)
}

func (c *ClientWithResponses) PostUserWithResponse(ctx context.Context, body PostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserResponse, error) {
	rsp, err := c.PostUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserResponse(rsp)
}

// DeleteUserTypeWithBodyWithResponse request with arbitrary body returning *DeleteUserTypeResponse
func (c *ClientWithResponses) DeleteUserTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUserTypeResponse, error) {
	rsp, err := c.DeleteUserTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserTypeResponse(rsp)
}

func (c *ClientWithResponses) DeleteUserTypeWithResponse(ctx context.Context, body DeleteUserTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUserTypeResponse, error) {
	rsp, err := c.DeleteUserType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserTypeResponse(rsp)
}

// GetUserTypeWithResponse request returning *GetUserTypeResponse
func (c *ClientWithResponses) GetUserTypeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserTypeResponse, error) {
	rsp, err := c.GetUserType(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserTypeResponse(rsp)
}

// PatchUserTypeWithBodyWithResponse request with arbitrary body returning *PatchUserTypeResponse
func (c *ClientWithResponses) PatchUserTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserTypeResponse, error) {
	rsp, err := c.PatchUserTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserTypeResponse(rsp)
}

func (c *ClientWithResponses) PatchUserTypeWithResponse(ctx context.Context, body PatchUserTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserTypeResponse, error) {
	rsp, err := c.PatchUserType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserTypeResponse(rsp)
}

// PostUserTypeWithBodyWithResponse request with arbitrary body returning *PostUserTypeResponse
func (c *ClientWithResponses) PostUserTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserTypeResponse, error) {
	rsp, err := c.PostUserTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserTypeResponse(rsp)
}

func (c *ClientWithResponses) PostUserTypeWithResponse(ctx context.Context, body PostUserTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserTypeResponse, error) {
	rsp, err := c.PostUserType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserTypeResponse(rsp)
}

// GetUserTypeIdWithResponse request returning *GetUserTypeIdResponse
func (c *ClientWithResponses) GetUserTypeIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetUserTypeIdResponse, error) {
	rsp, err := c.GetUserTypeId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserTypeIdResponse(rsp)
}

// GetUserAccountIdWithResponse request returning *GetUserAccountIdResponse
func (c *ClientWithResponses) GetUserAccountIdWithResponse(ctx context.Context, accountId int, reqEditors ...RequestEditorFn) (*GetUserAccountIdResponse, error) {
	rsp, err := c.GetUserAccountId(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAccountIdResponse(rsp)
}

// GetUsersUserIdWithResponse request returning *GetUsersUserIdResponse
func (c *ClientWithResponses) GetUsersUserIdWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUsersUserIdResponse, error) {
	rsp, err := c.GetUsersUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersUserIdResponse(rsp)
}

// ParseDeleteAccountResponse parses an HTTP response from a DeleteAccountWithResponse call
func ParseDeleteAccountResponse(rsp *http.Response) (*DeleteAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountResponse parses an HTTP response from a GetAccountWithResponse call
func ParseGetAccountResponse(rsp *http.Response) (*GetAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchAccountResponse parses an HTTP response from a PatchAccountWithResponse call
func ParsePatchAccountResponse(rsp *http.Response) (*PatchAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PatchAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAccountResponse parses an HTTP response from a PostAccountWithResponse call
func ParsePostAccountResponse(rsp *http.Response) (*PostAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePutAccountResponse parses an HTTP response from a PutAccountWithResponse call
func ParsePutAccountResponse(rsp *http.Response) (*PutAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAccountStateResponse parses an HTTP response from a DeleteAccountStateWithResponse call
func ParseDeleteAccountStateResponse(rsp *http.Response) (*DeleteAccountStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountStateResponse parses an HTTP response from a GetAccountStateWithResponse call
func ParseGetAccountStateResponse(rsp *http.Response) (*GetAccountStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchAccountStateResponse parses an HTTP response from a PatchAccountStateWithResponse call
func ParsePatchAccountStateResponse(rsp *http.Response) (*PatchAccountStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PatchAccountStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAccountStateResponse parses an HTTP response from a PostAccountStateWithResponse call
func ParsePostAccountStateResponse(rsp *http.Response) (*PostAccountStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AccountState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAccountStateIdResponse parses an HTTP response from a GetAccountStateIdWithResponse call
func ParseGetAccountStateIdResponse(rsp *http.Response) (*GetAccountStateIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountStateIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccountState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteAccountTypeResponse parses an HTTP response from a DeleteAccountTypeWithResponse call
func ParseDeleteAccountTypeResponse(rsp *http.Response) (*DeleteAccountTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountTypeResponse parses an HTTP response from a GetAccountTypeWithResponse call
func ParseGetAccountTypeResponse(rsp *http.Response) (*GetAccountTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AccountType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchAccountTypeResponse parses an HTTP response from a PatchAccountTypeWithResponse call
func ParsePatchAccountTypeResponse(rsp *http.Response) (*PatchAccountTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PatchAccountTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAccountTypeResponse parses an HTTP response from a PostAccountTypeWithResponse call
func ParsePostAccountTypeResponse(rsp *http.Response) (*PostAccountTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostAccountTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AccountType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAccountTypeAccountIdResponse parses an HTTP response from a GetAccountTypeAccountIdWithResponse call
func ParseGetAccountTypeAccountIdResponse(rsp *http.Response) (*GetAccountTypeAccountIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountTypeAccountIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AccountType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountTypeIdResponse parses an HTTP response from a GetAccountTypeIdWithResponse call
func ParseGetAccountTypeIdResponse(rsp *http.Response) (*GetAccountTypeIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountTypeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountAccountIdResponse parses an HTTP response from a GetAccountAccountIdWithResponse call
func ParseGetAccountAccountIdResponse(rsp *http.Response) (*GetAccountAccountIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAccountAccountIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCompanyResponse parses an HTTP response from a DeleteCompanyWithResponse call
func ParseDeleteCompanyResponse(rsp *http.Response) (*DeleteCompanyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyResponse parses an HTTP response from a GetCompanyWithResponse call
func ParseGetCompanyResponse(rsp *http.Response) (*GetCompanyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Company
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchCompanyResponse parses an HTTP response from a PatchCompanyWithResponse call
func ParsePatchCompanyResponse(rsp *http.Response) (*PatchCompanyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PatchCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Company
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCompanyResponse parses an HTTP response from a PostCompanyWithResponse call
func ParsePostCompanyResponse(rsp *http.Response) (*PostCompanyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Company
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCompanyUserIdResponse parses an HTTP response from a GetCompanyUserIdWithResponse call
func ParseGetCompanyUserIdResponse(rsp *http.Response) (*GetCompanyUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Company
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompanyIdResponse parses an HTTP response from a GetCompanyIdWithResponse call
func ParseGetCompanyIdResponse(rsp *http.Response) (*GetCompanyIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Company
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchUserResponse parses an HTTP response from a PatchUserWithResponse call
func ParsePatchUserResponse(rsp *http.Response) (*PatchUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PatchUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserResponse parses an HTTP response from a PostUserWithResponse call
func ParsePostUserResponse(rsp *http.Response) (*PostUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserTypeResponse parses an HTTP response from a DeleteUserTypeWithResponse call
func ParseDeleteUserTypeResponse(rsp *http.Response) (*DeleteUserTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserTypeResponse parses an HTTP response from a GetUserTypeWithResponse call
func ParseGetUserTypeResponse(rsp *http.Response) (*GetUserTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchUserTypeResponse parses an HTTP response from a PatchUserTypeWithResponse call
func ParsePatchUserTypeResponse(rsp *http.Response) (*PatchUserTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PatchUserTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserTypeResponse parses an HTTP response from a PostUserTypeWithResponse call
func ParsePostUserTypeResponse(rsp *http.Response) (*PostUserTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostUserTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetUserTypeIdResponse parses an HTTP response from a GetUserTypeIdWithResponse call
func ParseGetUserTypeIdResponse(rsp *http.Response) (*GetUserTypeIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserTypeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserAccountIdResponse parses an HTTP response from a GetUserAccountIdWithResponse call
func ParseGetUserAccountIdResponse(rsp *http.Response) (*GetUserAccountIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserAccountIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersUserIdResponse parses an HTTP response from a GetUsersUserIdWithResponse call
func ParseGetUsersUserIdResponse(rsp *http.Response) (*GetUsersUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete Account endpoint
	// (DELETE /account)
	DeleteAccount(ctx echo.Context) error
	// Get all accounts
	// (GET /account)
	GetAccount(ctx echo.Context) error
	// Update Account endpoint
	// (PATCH /account)
	PatchAccount(ctx echo.Context) error
	// Create Account endpoint
	// (POST /account)
	PostAccount(ctx echo.Context) error
	// Login endpoint
	// (PUT /account)
	PutAccount(ctx echo.Context) error
	// DELETE account state endpoint
	// (DELETE /account-state)
	DeleteAccountState(ctx echo.Context) error
	// GET account state endpoint
	// (GET /account-state)
	GetAccountState(ctx echo.Context) error
	// PATCH account state endpoint
	// (PATCH /account-state)
	PatchAccountState(ctx echo.Context) error
	// Post account state endpoint
	// (POST /account-state)
	PostAccountState(ctx echo.Context) error
	// GET account state endpoint
	// (GET /account-state/{id})
	GetAccountStateId(ctx echo.Context, id int) error
	// Delete account type endpoint
	// (DELETE /account-type)
	DeleteAccountType(ctx echo.Context) error
	// Read all account types
	// (GET /account-type)
	GetAccountType(ctx echo.Context) error
	// Update account type endpoint
	// (PATCH /account-type)
	PatchAccountType(ctx echo.Context) error
	// Create account type endpoint
	// (POST /account-type)
	PostAccountType(ctx echo.Context) error
	// GET  account types endpoint
	// (GET /account-type/account/{accountId})
	GetAccountTypeAccountId(ctx echo.Context, accountId int) error
	// GET account type endpoint
	// (GET /account-type/{id})
	GetAccountTypeId(ctx echo.Context, id int) error
	// GET account endpoint
	// (GET /account/{accountId})
	GetAccountAccountId(ctx echo.Context, accountId int) error
	// DELETE company endpoint.
	// (DELETE /company)
	DeleteCompany(ctx echo.Context) error
	// Company get endpoint
	// (GET /company)
	GetCompany(ctx echo.Context) error
	// Patch campany endpoint
	// (PATCH /company)
	PatchCompany(ctx echo.Context) error
	// Company Post endpoint
	// (POST /company)
	PostCompany(ctx echo.Context) error
	// GET Company endpoint
	// (GET /company/user/{userId})
	GetCompanyUserId(ctx echo.Context, userId int) error
	// Company GET endpoint
	// (GET /company/{id})
	GetCompanyId(ctx echo.Context, id int) error

	// (DELETE /user)
	DeleteUser(ctx echo.Context) error
	// Get all users
	// (GET /user)
	GetUser(ctx echo.Context) error

	// (PATCH /user)
	PatchUser(ctx echo.Context) error
	// Create New User
	// (POST /user)
	PostUser(ctx echo.Context) error
	// DELETE user type endpoint
	// (DELETE /user-type)
	DeleteUserType(ctx echo.Context) error
	// GET all user types endpoint
	// (GET /user-type)
	GetUserType(ctx echo.Context) error
	// PATCH user type
	// (PATCH /user-type)
	PatchUserType(ctx echo.Context) error
	// Post user type endpoint
	// (POST /user-type)
	PostUserType(ctx echo.Context) error
	// GET  user type endpoint
	// (GET /user-type/{id})
	GetUserTypeId(ctx echo.Context, id int) error
	// GET user with account endpoint
	// (GET /user/account/{accountId})
	GetUserAccountId(ctx echo.Context, accountId int) error
	// Get User Info by User ID
	// (GET /user/{userId})
	GetUsersUserId(ctx echo.Context, userId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteAccount converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAccount(ctx)
	return err
}

// GetAccount converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccount(ctx)
	return err
}

// PatchAccount converts echo context to params.
func (w *ServerInterfaceWrapper) PatchAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchAccount(ctx)
	return err
}

// PostAccount converts echo context to params.
func (w *ServerInterfaceWrapper) PostAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAccount(ctx)
	return err
}

// PutAccount converts echo context to params.
func (w *ServerInterfaceWrapper) PutAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutAccount(ctx)
	return err
}

// DeleteAccountState converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAccountState(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAccountState(ctx)
	return err
}

// GetAccountState converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountState(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountState(ctx)
	return err
}

// PatchAccountState converts echo context to params.
func (w *ServerInterfaceWrapper) PatchAccountState(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchAccountState(ctx)
	return err
}

// PostAccountState converts echo context to params.
func (w *ServerInterfaceWrapper) PostAccountState(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAccountState(ctx)
	return err
}

// GetAccountStateId converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountStateId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountStateId(ctx, id)
	return err
}

// DeleteAccountType converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAccountType(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAccountType(ctx)
	return err
}

// GetAccountType converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountType(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountType(ctx)
	return err
}

// PatchAccountType converts echo context to params.
func (w *ServerInterfaceWrapper) PatchAccountType(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchAccountType(ctx)
	return err
}

// PostAccountType converts echo context to params.
func (w *ServerInterfaceWrapper) PostAccountType(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAccountType(ctx)
	return err
}

// GetAccountTypeAccountId converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountTypeAccountId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "accountId" -------------
	var accountId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "accountId", runtime.ParamLocationPath, ctx.Param("accountId"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountTypeAccountId(ctx, accountId)
	return err
}

// GetAccountTypeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountTypeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountTypeId(ctx, id)
	return err
}

// GetAccountAccountId converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountAccountId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "accountId" -------------
	var accountId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "accountId", runtime.ParamLocationPath, ctx.Param("accountId"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountAccountId(ctx, accountId)
	return err
}

// DeleteCompany converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompany(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompany(ctx)
	return err
}

// GetCompany converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompany(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompany(ctx)
	return err
}

// PatchCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PatchCompany(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchCompany(ctx)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// GetCompanyUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanyUserId(ctx, userId)
	return err
}

// GetCompanyId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompanyId(ctx, id)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx)
	return err
}

// PatchUser converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchUser(ctx)
	return err
}

// PostUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUser(ctx)
	return err
}

// DeleteUserType converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserType(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUserType(ctx)
	return err
}

// GetUserType converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserType(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserType(ctx)
	return err
}

// PatchUserType converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUserType(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchUserType(ctx)
	return err
}

// PostUserType converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserType(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserType(ctx)
	return err
}

// GetUserTypeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserTypeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserTypeId(ctx, id)
	return err
}

// GetUserAccountId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserAccountId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "accountId" -------------
	var accountId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "accountId", runtime.ParamLocationPath, ctx.Param("accountId"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserAccountId(ctx, accountId)
	return err
}

// GetUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserId(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/account", wrapper.DeleteAccount)
	router.GET(baseURL+"/account", wrapper.GetAccount)
	router.PATCH(baseURL+"/account", wrapper.PatchAccount)
	router.POST(baseURL+"/account", wrapper.PostAccount)
	router.PUT(baseURL+"/account", wrapper.PutAccount)
	router.DELETE(baseURL+"/account-state", wrapper.DeleteAccountState)
	router.GET(baseURL+"/account-state", wrapper.GetAccountState)
	router.PATCH(baseURL+"/account-state", wrapper.PatchAccountState)
	router.POST(baseURL+"/account-state", wrapper.PostAccountState)
	router.GET(baseURL+"/account-state/:id", wrapper.GetAccountStateId)
	router.DELETE(baseURL+"/account-type", wrapper.DeleteAccountType)
	router.GET(baseURL+"/account-type", wrapper.GetAccountType)
	router.PATCH(baseURL+"/account-type", wrapper.PatchAccountType)
	router.POST(baseURL+"/account-type", wrapper.PostAccountType)
	router.GET(baseURL+"/account-type/account/:accountId", wrapper.GetAccountTypeAccountId)
	router.GET(baseURL+"/account-type/:id", wrapper.GetAccountTypeId)
	router.GET(baseURL+"/account/:accountId", wrapper.GetAccountAccountId)
	router.DELETE(baseURL+"/company", wrapper.DeleteCompany)
	router.GET(baseURL+"/company", wrapper.GetCompany)
	router.PATCH(baseURL+"/company", wrapper.PatchCompany)
	router.POST(baseURL+"/company", wrapper.PostCompany)
	router.GET(baseURL+"/company/user/:userId", wrapper.GetCompanyUserId)
	router.GET(baseURL+"/company/:id", wrapper.GetCompanyId)
	router.DELETE(baseURL+"/user", wrapper.DeleteUser)
	router.GET(baseURL+"/user", wrapper.GetUser)
	router.PATCH(baseURL+"/user", wrapper.PatchUser)
	router.POST(baseURL+"/user", wrapper.PostUser)
	router.DELETE(baseURL+"/user-type", wrapper.DeleteUserType)
	router.GET(baseURL+"/user-type", wrapper.GetUserType)
	router.PATCH(baseURL+"/user-type", wrapper.PatchUserType)
	router.POST(baseURL+"/user-type", wrapper.PostUserType)
	router.GET(baseURL+"/user-type/:id", wrapper.GetUserTypeId)
	router.GET(baseURL+"/user/account/:accountId", wrapper.GetUserAccountId)
	router.GET(baseURL+"/user/:userId", wrapper.GetUsersUserId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcXXPbuBX9KxhsZ/oiW5KtTGM91XG8qafbbCa1X7rjB5i8suCQABeA7Kge/fcdfPBL",
	"BCVSMWXJ0UsikwRxgXtwcQ4uwGcc8DjhDJiSePyMZTCFmJif50HAZ0zpn4ngCQhFwdwIiQL9/4SLmCg8",
	"NheOFI0B97CaJ4DHWCpB2T1e9DDEhEb68codGhYuU6bgHoS+nhApn7gIvYUU/wbMe2cmQXwmMXhuLnpY",
	"wJ8zKiDE4z90xYVaUhN7tmG3PayoinTxtAeyVvG7BwiUrszd+q9yfbHUQyADQRNFOWvVctbcfPNo1VZr",
	"UL3B1+b6sr3E3ryqMYssNbb6RF2DtE90lf43+9qVm1IqvWREteGmYZ52X/A4IWxebXOdyTFhRP9s46Ae",
	"nomojePyagotSU31tOJGWovgO4mTSDfgj5LXBha8v08+UKGmeIxPBsOzo8H7o5PR9XA0Hr4bn5z8D/fw",
	"hAqp7CBJjbTOG/RwRJZvLW577YBSsiGzdoU5jSJIwejasVQacfiG0T9ngGgITNEJBYEmXCA1BXRPH4Eh",
	"DazjvKpCC/JOaOTM3LRC0SKIC+41PqzxrX9YvkIYyYypGKqLUzbhZpaYxTERcz36kICZJHcRoPOEIjUl",
	"CpEo4k8SkZma6v4PiG4AIiw0l7ig0l7hE+MIpDgiQQBSIgGSz0QA0jjHmaSfkbiHH0FI697h8UA3kyfA",
	"SELxGJ8e60s6pqup6bk+ySevECKwcasMko/mOoLvVCrK7pErcoyup1QiEhgbYzJHDB61lYLeg4DwGN3N",
	"FCJhTO3dO7ANhlA3ROmywMKEU6Z0K7Q/TXP1mHF15vOK9gdI9YGHJkIFnCmwVpMkiVzX9R+kBYCdnPWv",
	"vwmY4DH+pZ/P3n03dffTty8W1uMy4UxaQJ0MBg2qyYPMM760v9FQ//FIohngsRIzWPSyWyeFWxMSSdDV",
	"5qY6GN1xHgFhFkdlR/z+b+3NkbWtfOsDCdFX20f2maFvsDtY/R9CA/Icnc7Frkcyv+hX3YOqvuorKEHh",
	"0XjUhItlcMiqSz+BKvqzdW/nPUUVxLKxd7MBSoQg8877VT90Wn3oVy7uaBgCW+r5T2DiQNZvltepYOqp",
	"J9HRf804DAhDnEVmuIWcAbqbI8LsMKz65IuuadNRtg7+ljIbTuGm3foJzpHf9J3/VCDVccDjfNbNyS4e",
	"xWe/POig7DguPj0bPEhO308enka4SHDxlymNKLdO35GosPfdsr2w5BDvC0sJl564FAjQBQhi8JSOjyro",
	"uVQHzDfG/PDQLVXMXxighV0B377eD/yZB/c3jh4mgj/SEFDaQ+iJqikCqqYgDIfUNBZxgUwnIxKGQtNJ",
	"xdG9noeQ6UXPNDFTe07FNgHgsu4rwC67lcIuu1AAXCYndjvI/sbvKStAbNHLVMGRTFcy1mgDwiq0BJmy",
	"a5h9ugrz0kG4bOSyI9kP+sda3a1seE1p0JLCfrz87fL6suz39RJCgBJAnYTwg2eliMih00Gw2BJ+fF4s",
	"q4PL6xX9ulonlMqtZP6HUbhrIHitofzl/PriX6sQ52XdFx7WXQe7nHvvN+p6Jeu+x1GZ7CyvCfZwPIsU",
	"TYhQ/QkX8VFIFFldpDMq/kq4fnnK3BbcXKpabFdYT/+Zhgv9cu/sZehyHemxrJswRMO1M5hJ2fjC1zaC",
	"wr5CqeBh3ZZR1ZTPXKFf+YyFLSdUQWJQIGzeiOo3JURNcdYWGuJickBTNQ9RyxN3t0VcKZe82IBM66I2",
	"aUAlYlyhiLJvdiXdqbtiKZMtYNxmDKpvW0PKXVrjpeNyISV2cjpaTpaenozeWeAMh6flfOjp6F177JhG",
	"dEgOXqc1O0X7HVqLCG2QOCChn/Hr8isJfwbLF/dmJUVcduYgC2hFPw4Wt2U3tslKWH/udmYic1XJQw10",
	"R134qs/2FcXIIfr8nNHHt/BfG1ta6JBy2RV65I0Db/iGgLed1fca9C0zuvSP/nPWOfW64Wtx1atUQU7o",
	"CKtNXZVnw/PCFrCtJdR3dOraQAeUJ7aWQoCU+n5zPbBaZhq5UjefWpVZvLJab2Y7BLuekhozqDfBg4uS",
	"sjpRdaooG4WcTzVLFUX4XK0Ezg/GmUNubuOZqIit7cWnIN8K3GKpIiCmVN3iQr5p96UZloNAth/5rLL0",
	"5LYdb+D11OpDsq+c7HMQKWi6VVsFq3k+W57WKP4iVrpQ+8uIGY7WIWYTrZ9hZ7d1vjPT7ABpkV1ky86c",
	"1+j6LQ7892d7NPKr9v+jG/N3KsGoEZFOFW0lvSvmFfHbQ9m2ZpdhNxh7vxWMvXqyL41qJulXFu8uXPU1",
	"Hew/63/b0Od05rP0GbmO/busE1/OkBtTDd5SJBm8+UCimfEF94SRtcx4lntiI1q8WrHndKcWM2wNVA4w",
	"efkwoOGyBV0+c8cPmx6lSs/X+QSTOwbX4Xp0R4chm4PGNHEvpdVi1bbG7GRUyc9+qZN5ufusZicHXzfQ",
	"RdbrzUSR96yUPejYSqL4B5pho4dx9ibb2u0iXTPBUoM6LlVHoKvret/KqdcDa7u++oWLwjn20jH1dt+4",
	"WH12vflp85qD5sUvV6QG33qPbpfdaeSDmgJiEICURMzRhEIUyuyg/PmXK6Q4Cqp+/5lHmzmQtE4E/odK",
	"qYPzV+c/dMUsgvRtU+isWujSnFw6jwSQcI6uybcq57Ou+AxPyJnnmNkmG/Dswft5AqtoWkdbBzraXZlZ",
	"fFjULi9qZ75udgC+uqqdvaCe63W6i60VYDalbq+yAaCaFXM80Ju8b8MKawZ3Rg0PY/sVTN+9MzEZVNau",
	"VacEoMHOs7eGr+G+4ms3zqb45p8Sd9lg6TF/55rFx5viN8R+aDfZPg5ysx/MP/93uFTYah/Puf1alOIo",
	"PzprTU49u3ozj+76znfy/HwrAcsoKnhk6xt3mmW0so83aflKc8mF+MRcylug/4o1EcoiydXHWmzJblNc",
	"e6N63XbTmg2p5pHaXamgjGQ1Qhjdzd0fHz3IKb/1KtTO8y14vlgCTBsK4jGt3+aJpkol434/4gGJplyq",
	"8elgcKKlxV8BAAD//1P8VQIvVQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
